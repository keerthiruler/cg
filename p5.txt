#include <stdlib.h>
#include <glut.h>


GLfloat vertices[][3] = {
    {-1, -1, -1},
    {1, -1, -1},
    {1, 1, -1},
    {-1, 1, -1},
    {-1, -1, 1},
    {1, -1, 1},
    {1, 1, 1},
    {-1, 1, 1}
};


GLint edges[][2] = {
    {0, 1},
    {1, 2},
    {2, 3},
    {3, 0},
    {4, 5},
    {5, 6},
    {6, 7},
    {7, 4},
    {0, 4},
    {1, 5},
    {2, 6},
    {3, 7}
};


GLfloat angleX = 0.0;
GLfloat angleY = 0.0;
GLfloat angleZ = 0.0;


GLfloat translateX = 0.0;
GLfloat translateY = 0.0;
GLfloat translateZ = 0.0;


GLfloat scaleX = 1.0;
GLfloat scaleY = 1.0;
GLfloat scaleZ = 1.0;


void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();

    
    gluLookAt(3, 3, 3, 0, 0, 0, 0, 1, 0);

  
    glTranslatef(translateX, translateY, translateZ);
    glRotatef(angleX, 1, 0, 0);
    glRotatef(angleY, 0, 1, 0);
    glRotatef(angleZ, 0, 0, 1);
    glScalef(scaleX, scaleY, scaleZ);


    glColor3f(1, 1, 1);
    glBegin(GL_LINES);
    for (int i = 0; i < 12; i++) {
        glVertex3fv(vertices[edges[i][0]]);
        glVertex3fv(vertices[edges[i][1]]);
    }
    glEnd();

    glutSwapBuffers();
}


void idle() {
    angleX += 0.5;
    if (angleX > 360) angleX -= 360;
    angleY += 0.5;
    if (angleY > 360) angleY -= 360;
    angleZ += 0.5;
    if (angleZ > 360) angleZ -= 360;
    glutPostRedisplay();
}


void keyboard(unsigned char key, int x, int y) {
    switch (key) {
        case 'w':
            translateY += 0.1;
            break;
        case 's':
            translateY -= 0.1;
            break;
        case 'a':
            translateX -= 0.1;
            break;
        case 'd':
            translateX += 0.1;
            break;
        case 'q':
            translateZ += 0.1;
            break;
        case 'e':
            translateZ -= 0.1;
            break;
        case '+':
            scaleX += 0.1;
            scaleY += 0.1;
            scaleZ += 0.1;
            break;
        case '-':
            scaleX -= 0.1;
            scaleY -= 0.1;
            scaleZ -= 0.1;
            break;
        case 'r':
            angleX = 0.0;
            angleY = 0.0;
            angleZ = 0.0;
            translateX = 0.0;
            translateY = 0.0;
            translateZ = 0.0;
            scaleX = 1.0;
            scaleY = 1.0;
            scaleZ = 1.0;
            break;
        case 27: // ESC key
            exit(0);
            break;
    }
    glutPostRedisplay();
}

void init() {
    glClearColor(0, 0, 0, 1);
    glEnable(GL_DEPTH_TEST);
}

void reshape(int w, int h) {
    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(60, (float)w / h, 1, 100);
    glMatrixMode(GL_MODELVIEW);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(800, 600);
    glutCreateWindow("3D Transformations");
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutIdleFunc(idle);
    glutKeyboardFunc(keyboard);
    init();
    glutMainLoop();
    return 0;
}
